
////////////////////////////////////////
//                                    //
//   Generated by CEO's YAAAG - V1.2  //
// (Yet Another Arya Addon Generator) //
//                                    //
////////////////////////////////////////
using System;
using Server;
using Server.Items;

namespace Server.Items
{
	public class braziertreeAddon : BaseAddon
	{
        private static int[,] m_AddOnSimpleComponents = new int[,] {
			  {7420, -1, -1, 0}, {7421, 0, -1, 0}, {7411, -1, 4, 0}// 1	2	3	
			, {7410, 0, 4, 0}, {7442, 0, 1, 0}, {7440, -1, 2, 0}// 4	5	6	
			, {7417, -3, 0, 0}, {7422, 1, -1, 0}, {7413, -3, 4, 0}// 7	8	10	
			, {7409, 1, 4, 0}, {7416, -3, 1, 0}, {4706, 0, 3, 20}// 11	12	14	
			, {7441, -1, 1, 0}, {7574, 0, 3, 14}, {7570, 0, 3, 20}// 15	17	18	
			, {7572, 1, 2, 20}, {7423, 2, -1, 0}, {7426, 2, 2, 0}// 20	21	22	
			, {7435, 0, 0, 0}, {7415, -3, 2, 0}, {7418, -2, 0, 0}// 23	24	25	
			, {7419, -2, -1, 0}, {7432, -2, 2, 0}, {7433, -2, 1, 0}// 26	27	28	
			, {7573, 2, 1, 26}, {7424, 2, 0, 0}, {6665, -1, 4, 10}// 31	32	33	
			, {7571, 0, 3, 20}, {7037, 2, 1, 16}, {7429, 0, 3, 0}// 34	35	37	
			, {7414, -3, 3, 0}, {7438, 1, 2, 0}, {7428, 1, 3, 0}// 38	39	40	
			, {7427, 2, 3, 0}, {7412, -2, 4, 0}, {4654, 3, -4, 0}// 42	44	46	
			, {7437, 1, 1, 0}, {7425, 2, 1, 0}, {7436, 1, 0, 0}// 47	48	49	
			, {4650, 1, 0, 0}, {7431, -2, 3, 0}, {7439, 0, 2, 0}// 50	51	52	
			, {7434, -1, 0, 0}, {6667, 0, 3, 26}, {7430, -1, 3, 0}// 53	55	58	
			, {6941, 1, 2, 20}, {7573, 0, 3, 26}, {4650, 4, 2, 0}// 59	60	61	
			, {5741, 4, 0, 0}, {4655, 4, 0, 0}, {5741, 4, 2, 0}// 62	63	64	
					};

 
            
		public override BaseAddonDeed Deed
		{
			get
			{
				return new braziertreeAddonDeed();
			}
		}

		[ Constructable ]
		public braziertreeAddon()
		{

            for (int i = 0; i < m_AddOnSimpleComponents.Length / 4; i++)
                AddComponent( new AddonComponent( m_AddOnSimpleComponents[i,0] ), m_AddOnSimpleComponents[i,1], m_AddOnSimpleComponents[i,2], m_AddOnSimpleComponents[i,3] );


			AddComplexComponent( (BaseAddon) this, 6233, 1, 3, 0, 0, 1, "", 1);// 9
			AddComplexComponent( (BaseAddon) this, 4792, -1, 4, 0, 1109, -1, "Burned Yew Tree", 1);// 13
			AddComplexComponent( (BaseAddon) this, 6233, -2, 4, 0, 0, 1, "", 1);// 16
			AddComplexComponent( (BaseAddon) this, 6579, 2, 4, 7, 0, 0, "", 1);// 19
			AddComplexComponent( (BaseAddon) this, 4796, 3, 0, 0, 1109, -1, "Burned Yew Tree", 1);// 29
			AddComplexComponent( (BaseAddon) this, 4794, 1, 2, 0, 1109, -1, "Burned Yew Tree", 1);// 30
			AddComplexComponent( (BaseAddon) this, 4793, 0, 3, 0, 1109, -1, "Burned Yew Tree", 1);// 36
			AddComplexComponent( (BaseAddon) this, 6233, 2, 0, 0, 0, 1, "", 1);// 41
			AddComplexComponent( (BaseAddon) this, 3633, 2, 4, 0, 0, 1, "", 1);// 43
			AddComplexComponent( (BaseAddon) this, 4791, -2, 5, 0, 1109, -1, "Burned Yew Tree", 1);// 45
			AddComplexComponent( (BaseAddon) this, 3633, -4, 4, 0, 0, 1, "", 1);// 54
			AddComplexComponent( (BaseAddon) this, 4795, 2, 1, 0, 1109, -1, "Burned Yew Tree", 1);// 56
			AddComplexComponent( (BaseAddon) this, 6579, -4, 4, 7, 0, 0, "", 1);// 57

		}

		public braziertreeAddon( Serial serial ) : base( serial )
		{
		}

        private static void AddComplexComponent(BaseAddon addon, int item, int xoffset, int yoffset, int zoffset, int hue, int lightsource)
        {
            AddComplexComponent(addon, item, xoffset, yoffset, zoffset, hue, lightsource, null, 1);
        }

        private static void AddComplexComponent(BaseAddon addon, int item, int xoffset, int yoffset, int zoffset, int hue, int lightsource, string name, int amount)
        {
            AddonComponent ac;
            ac = new AddonComponent(item);
            if (name != null && name.Length > 0)
                ac.Name = name;
            if (hue != 0)
                ac.Hue = hue;
            if (amount > 1)
            {
                ac.Stackable = true;
                ac.Amount = amount;
            }
            if (lightsource != -1)
                ac.Light = (LightType) lightsource;
            addon.AddComponent(ac, xoffset, yoffset, zoffset);
        }

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( 0 ); // Version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}
	}

	public class braziertreeAddonDeed : BaseAddonDeed
	{
		public override BaseAddon Addon
		{
			get
			{
				return new braziertreeAddon();
			}
		}

		[Constructable]
		public braziertreeAddonDeed()
		{
			Name = "braziertree";
		}

		public braziertreeAddonDeed( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( 0 ); // Version
		}

		public override void	Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}
	}
}